/*Louis Monfiero
2/5/19
Description: Program 2 allows the user to play on the map generated in program 1
Program 2 reads the file generated by the 1st program and copies the 2D array it created 
into a new 2D array in Prg. 2
Program displays H (hot) when selection is close, a C (cold) when selection is far, a P (pirate) when
they get caught by a pirate, and an X when they find the treasure */

#include <iostream>
#include <cstdlib>
#include <ctime>
#include <fstream>
#include <string>
using namespace std;

#define ROWS 9
#define COLS 9

//Loads file (treasure.txt) from the 1st program and copies the contents into an array
//@param = 9x9 array in which contents of treasure.txt will be copied into
void load_map(char array[][9]);

//Input validation for the rows to accept only A, B, C, D, E, F, G, H, I or a, b, c, d, e, f, g, h, i
//@return = returns an equivalent integer of 1 to 9 based on the letter chosen (Aa = 1, Bb = 2, Cc = 3, etc.)
int getRows();

//Input validation for the columns to accept only numbers 1 to 9
//@return = returns the chosen integer of 1 to 9
int getCols();

//Input validation for the menu choice to accept only either a 1 or a 2
//@return = returns integer choice of 1 or 2
int getMenu();

//Resets the board grid with all '~'
//@param = passes a 9x9 array to be reset to '~'
void clearBoard(char array[][9]);

//Displays the board to the user, including the rows (A-I) and columns (1-9)
//User selections will return either "H", "C", "P", "p", or "X" and also display it on the board
//@param = passes the 9x9 array (the board) to be displayed
void displayBoard(char array[][9]);

//Returns the result of the user's selection. An "H" for hot, if the treasure is within one of the 8 boxes surrounding it,
//a "C" for cold, if the treasure (or a pirate) are nowhere near in sight, a "p" if the pirate is nearby (8 boxes surrounding), 
//a "P" for pirate if you got caught by said pirate, and an "X" if you've found treasure
//@param = passes the treasure map with the known locations of Xs and P
//@param = x is the index of the rows selected from A-I
//@param = y is the index of the column chosen by the player
char getClue(char array[][9], int x, int y);

//Checks board to see if the location input has already been checked
//@param = passes the board map
//@param = x is the index of the rows selected from A-I
//@param = y is the index of the column chosen by the player
char checkAgain(char array[][9], int x, int y);

//Asks the user if they want to retry their move
//@return = True or False for yes
bool getYesNo();

int main()
{
    int counter = 5;
    int menuChoice = 0;
    int rChoice = 0;
    int cChoice = 0;
    int tries = 1;
    bool retry;
    char result;
    char circle;
    char map[ROWS][COLS];
    char board[ROWS][COLS];
    load_map(map);
    clearBoard(board);
    while (counter != 0)
    {
        cout <<  counter << " Treasures left to find!\nTry #: " << tries << "\n\n";
        displayBoard(board);
        cout << "Treasure Hunt:\n1.Hunt\n2.Quit\nSelection: ";
        menuChoice = getMenu();
        
        if (menuChoice == 2)
        {
            cout << "\nArr, the Pirate's Life is not for ye!\n";
            return 0;
        } 
        rChoice = getRows();
        cChoice = getCols();

        result = getClue(map, rChoice, cChoice);
        circle = checkAgain(board, rChoice, cChoice);
        if (circle == 'D') 
        {
            cout << "\nYo-ho-ho, you got this treasure already!\n";
            tries--;
            circle = 'W';
        }

        else if (circle == 'L') 
        {
            cout << "\nYo-ho-ho, ya been here near the pirate before!\n";
            tries--;
            circle = 'W';
        }

        else if (circle == 'A') 
        {
            cout << "\nYo-ho-ho, ya kno' the treasure innit here!\n";
            tries--;
            circle = 'W';
        }

        else if (circle == 'B') 
        {
            cout << "\nYo-ho-ho, we've got the booty nearby in the coffers already!\n";
            tries--;
            circle = 'W';
        }
        
        else if (result == 'P')
        {
            cout << "\nAvast ye young scalliwag! Ya been lookin' for me booty!? Throw 'em out to sea lads!\nYou drift out to sea, knowing you've lost.\n";
            board[rChoice][cChoice] = result;
            displayBoard(board);
            cout << "Would you like to try again?\nYes/No: ";
            retry = getYesNo();
            if (!retry) return 0;
            board[rChoice][cChoice] = '~';

        }

        else if (result == 'p')
        {
            cout << "\nOi laddies! I sense a treasure hunter amongst us!\n";
            board[rChoice][cChoice] = result;
        }

        else if (result == 'X')
        {
            cout << "\nAhh! A fine addition to my collection!\n";
            board[rChoice][cChoice] = result;
            counter--;
        }

        else if (result == 'H')
        {
            cout << "\nThis is where the fun begins! I sense treasure nearby!\n";
            board[rChoice][cChoice] = result;
        }

        else if (result == 'C')
        {
            cout << "\nTake a C, young Skywalker. You are nowhere near close to treasure!\n";
            board[rChoice][cChoice] = result;
        }
        tries++;
    cout << endl;

    }
    cout << "Congratulations! You've gone right under Blackbeard's nose and stolen his treasure!\nTime to sail back to Tortuga and count out riches!\n(Completed in " << tries << "tries)";
}

//Loads "treasure.txt" and gets an array from it
void load_map(char array[][9])
{
    int ccounter = 0;
    int rcounter = 0;
    fstream file;
    string line;
    file.open("treasure.txt", ios::in);
    if (file)
    {
        while(getline(file, line))
        {   
            for (int i = 0; i < line.length(); i++)
            {   
                if (ccounter == COLS)
                {
                    rcounter++;
                    ccounter = 0;
                }
                array[rcounter][ccounter] = line[i];
                ccounter++;
            }
        }
        file.close();
    }
    else
    {
        cout << "File not found" << endl;
    }
    
}

//Input validation for rows
int getRows() 
{
    string input;
    int len = 0;
    int ascii;
    bool valid = false;
    cout << "\nEnter row letter: ";
    
    while (!valid)
    {
        cin >> input;
        cout << endl;
        ascii = (int) input[0];
        len = input.length();
        
        if (len > 1)
        {
            cout << "Multiple Characters entered.\nTry again (A - I or a - i): ";
        }

        else if ((ascii >= 97 && ascii <= 105) || (ascii >= 65 && ascii <= 73))
        {
            if (ascii >= 97) return ascii - 97;
            return ascii - 65;//97A, 98B, 99C, 100D, 101E, 102F, 103G, 104H, 105I, lowercase
        }
        
        else
        {
            cout << "Enter Valid Character (A - I or a - i): ";
        }
    }
    return 0;
}

//Input validation for columns
int getCols( ) {
	int input = 0;
	bool valid = false;
    cout << "Enter column number: ";
	while(!valid) {
		if(cin >> input) {
            if (input >= 1 && input <= 9) 
            {
		        valid = true;
            }
            
            else
            {
              cout << "Please enter a valid number (1 - 9): ";
            }

		} else {
			cin.clear(); 
			string invalid;
			cin >> invalid;
			cout<< "Please enter a valid number (1 - 9): ";
		}
	}
	return input - 1;
}

//Input validation for menu choice
int getMenu()
{
    int input = 0;
	bool valid = false;
	while(!valid) {
		if(cin >> input) {
			if (input >= 1 && input <=2)
            {
                valid = true;
            }

            else
            {
                cout << "Please select a valid choice (1 - 2): ";
            }
            
		} else {
			cin.clear();
			string invalid;
			cin >> invalid;
			cout<< "Please select a valid choice (1 - 2): ";
		}
	}
	return input;
}

//Resets the board to '~'
void clearBoard(char array[][9])
{
    for (int i = 0; i < 9; i++)	
    {
		for (int j = 0; j < 9; j++)    
        {
            array[i][j] = '~';
        }
    }
}

//Displays the board to the user, including any previous inputs
void displayBoard(char array[][9])
{
    char letters;
    int ascii = 65;
    cout << " ";
    for (int k = 0; k < 9; k++)
    {
      cout << k + 1;
    }
    cout << endl;
    
    for (int i = 0; i < 9; i++) 
    {
        letters = (char) ascii;
        cout << letters;
        ascii++;
        
        for (int j = 0; j < 9; j++)
        {
            cout << array[i][j];
        }
        cout << endl;
    }
}

//Returns a char that represents user selection based on treasure or pirate location compared to user selection
char getClue(char array[][9], int x, int y)
{
    if (array[x][y] == 'X') return 'X';

    else if (array[x][y] == 'P') return 'P';
 
    else if ((array[x-1][y] == 'P') || (array[x+1][y] == 'P') || (array[x][y-1] == 'P') || (array[x][y+1] == 'P') || (array[x-1][y-1] == 'P') || (array[x+1][y-1] == 'P') || (array[x+1][y+1] == 'P') || (array[x-1][y+1] == 'P'))
    {
        return 'p';
    }
    
    else if ((array[x-1][y] == 'X') || (array[x+1][y] == 'X') || (array[x][y-1] == 'X') || (array[x][y+1] == 'X') || (array[x-1][y-1] == 'X') || (array[x+1][y-1] == 'X') || (array[x+1][y+1] == 'X') || (array[x-1][y+1] == 'X'))
    {
        return 'H';
    }
   return 'C';
}

//Checks if the spot was already tried out
char checkAgain(char array[][9], int x, int y)
{
    if (array[x][y] == 'X') return 'D';
    else if (array[x][y] == 'p') return 'L';
    else if (array[x][y] == 'C') return 'A';
    else if (array[x][y] == 'H') return 'B';
    return 'W';
}

bool getYesNo( ) {
	string input;
	bool valid = false;
	while(!valid) {
		cin >> input;
		if(input == "yes" || input == "Yes" || input == "YES" || input == "Y" || input == "y") {
			return true;
		} else if(input == "no" || input == "No" || input == "NO" || input == "N" || input == "n") {
			return false;
		} else {
			cout<< "Invalid Input" << endl;
		}
	}
	return false;
}